var mongoose = require('mongoose');
var schema = new mongoose.Schema({
    effectiveDate: Date,
    user: {type: mongoose.Schema.Types.ObjectId, ref: 'user'}, 
    score:  {
        winRate: Number,
        totalWins: Number,
        totalBattles: Number
    }
});
var model = mongoose.model('leaderboard', schema);
exports.schema = schema;
exports.model = model;

//************************************************************************************************************
// function     : d4-roshamleader.genScores
// developer    : Kai
// developed on : 7/17/2014
// arguments    : 
//************************************************************************************************************
exports.genScores = function(){
    var roshamuser = require('d4-roshamuser');
    var scoreDate = new Date;
    var newScore;
    
    var query = roshamuser.roshamuserModel.find();
    
    query.find(function(err, foundUsers){
        if(foundUsers){
            for(var i=0; i<foundUsers.length; i++){
                newScore = new model({'effectiveDate': scoreDate,
                                      'user': foundUsers[i].userid});
                newScore.score.winRate = foundUsers[i].totalWins / foundUsers[i].totalBattles;
                newScore.score.totalWins = foundUsers[i].totalWins;
                newScore.score.totalBattles = foundUsers[i].totalBattles;
                newScore.save(function (err){});
            }
        }
    });
};

//************************************************************************************************************
// function     : d4-roshamleader.getScores
// developer    : Kai
// developed on : 7/17/2014
// arguments    : scoreCard { scoreType: winRate or totalWins
//                            numScores: int
//                            startAtRank: int  }
//************************************************************************************************************
exports.getScores = function(scoreCard, callback){
    if(scoreCard){
        model.find()
        .sort('-effectiveDate')
        .limit(1)
        .exec(function(err, data){
            if (err)
                return callback({error:err}, undefined);
            else {
                var query = model.find();
                if (typeof data[0] != 'undefined')
                query.where('effectiveDate').equals(new Date(data[0].effectiveDate));
                if(scoreCard.scoreType === 'winRate'){
                    query.where('score.totalBattles').gte(10);
                    query.sort('-score.winRate');
                }
                else if(scoreCard.scoreType === 'totalBattles'){
                    query.sort('-score.totalBattles');
                }
                else {
                    query.sort('-score.totalWins');
                }

                if(typeof scoreCard.numScores != 'undefined'){
                    query.limit(scoreCard.numScores);
                }

                if(typeof scoreCard.startAtRank != 'undefined'){
                    query.skip(scoreCard.startAtRank - 1);
                }

                query.populate('user', 'name');

                query.find(function(err, foundScores){
                    if(err){
                        return callback({'error': err}, undefined);
                    }
                    if(foundScores){
                        return callback(undefined, foundScores);
                    }
                });
            }
        });
    }
    else{
        return callback({'error': 'You lose, no scoreCard.'}, undefined);
    }    
};
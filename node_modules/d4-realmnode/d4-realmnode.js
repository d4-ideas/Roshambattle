var mongoose = require('mongoose');
var conn = require('d4-realmconnection');
var schema = new mongoose.Schema({
    createdDate: { type: Date, default: Date.now },
    owner: {type: mongoose.Schema.Types.ObjectId, ref: 'user'}, 
    shortDesc: String,
    description: String,
    resources: {/*tobedefined*/},
    type: {/*tobedefined*/}
});
var model = mongoose.model('node', schema);
exports.schema = schema;
exports.model = model;

//create a root node and export the id
var lobbyID;
model.findOneAndUpdate({owner:null}, {shortDesc:'Lobby', description: 'You are in a dimly lit lobby surrounded by exits to various realms.'}, {upsert:true, 'new':true}, function(err, data) {
    if (err){
        console.log('Unable to initialize d4-realmnode.  Error:' + err);
    }
    else{
        lobbyID = data._id;
        
        exports.lobbyID = lobbyID;
    }
});


//************************************************************************************************************
// function     : d4-realmnode.addNode()
// developer    : Rob
// developed on : 8/2/2014
// arguments    : {user, shortDesc, description}
//************************************************************************************************************
exports.addNode = function(node, callback){
    if ((typeof node.user != 'undefined') && (node.user != null)){
        var newNode = {owner: node.user};
        
        if (node.shortDesc)
            newNode.shortDesc = node.shortDesc;
        else
            newNode.shortDesc = 'Empty space';
        
        if (node.description)
            newNode.description = node.description;
        else
            newNode.description = 'A vast empty place waiting for you to create your world.';
    
        model.create(newNode, function(err, data){
            if (err)
                callback({error:err}, undefined);
            else
                callback(undefined, data);
        });
    } else
        callback ({error:'Giving me a user might help'}, undefined);
};

//************************************************************************************************************
// function     : d4-realmnode.updateNode()
// developer    : Robnpm
// developed on : 8/2/2014
// arguments    : {nodeID, user, description}
//************************************************************************************************************
exports.updateNode = function(node, callback){
    if (node.nodeID){
        var update = {};
        if (node.user)
            update.owner = node.user;
        if (node.description)
            update.description = node.description;
        
        model.findOneAndUpdate({_id:node.nodeID}, update, function(err, data) {
            if (err)
                callback ({error:err}, undefined);
            else
                callback(undefined, data);
        });
    } else
        callback ({error:'Giving me a user might help'}, undefined);
};

//************************************************************************************************************
// function     : d4-realmnode.getNodes()
// developer    : Rob
// developed on : 8/12/2014
// arguments    : user
//************************************************************************************************************
exports.getNodes = function(user, callback){
    if (user){
        model.find({owner:user}, function(err, nodes){
            if(err)
                callback({error:err}, undefined);
            else                       
                callback(undefined, nodes);
        });
    } else
        callback({error:'Gimme a user or else'}, undefined);      
};

//************************************************************************************************************
// function     : d4-realmnode.getNodes()
// developer    : Rob
// developed on : 8/15/2014
// arguments    : {nodeID}
//************************************************************************************************************
exports.getNode = function(node, callback){
    if (node){
        model.find({_id:node.nodeID}, function(err, node){
            if(err)
                callback({error:err}, undefined);
            else                       
                callback(undefined, node);
        });
    } else
        callback({error:'Gimme something to work with'}, undefined);      
};
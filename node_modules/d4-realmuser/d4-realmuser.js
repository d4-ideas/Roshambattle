//******************************************************************************
//  d4-realmuser
//  Zot
//  The purpose of this module is to store the user's current state
//******************************************************************************

var mongoose = require('mongoose');
var conn = require('d4-realmconnection');
var node = require('d4-realmnode');

var weaponTypes = ['Rock','Scissors','Paper'];
var actionTypes = ['Attack', 'Connect', 'Sever'];
var schema = new mongoose.Schema({
    user: {type: mongoose.Schema.Types.ObjectId, ref: 'user'}, 
    actions: [{actionType: {type: String, enum:actionTypes},
               targetNode: {type: mongoose.Schema.Types.ObjectId, ref: 'node'},
               targetConnection: {type: mongoose.Schema.Types.ObjectId, ref: 'connection'}}]
});
var model = mongoose.model('realmUser', schema);
exports.schema = schema;
exports.model = model;

//************************************************************************************************************
// function     : d4-roshamuser.joinGame
// developer    : Kai
// developed on : 9/18/2014
// arguments    : user object {userid}
//                callback function (error, boolean)
//************************************************************************************************************
exports.joinGame = function(user, callback){
    if(user){
        var valquery = node.findOne({}).where('owner').equals(user.userid);
        
        
        var query = model.findOne({}).where('user').equals(user.userid);
        query.exec(function(err, foundUser){
            if(err){
                return callback({'error': err}, undefined);
            }
            if(foundUser){
                
                return callback({'error': 'Naughty, naughty, you can\'t join a game you are already in.'}, undefined);
            }
            else{
                
                /*
                newUser = new model({'user': user.userid});
                newUser.save(function(err){
                    if (err){
                        return callback({'error': err}, undefined);
                    }
                    else return callback(undefined, true);
                });
                
                */
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-roshamuser.getUserView
// developer    : Kai
// developed on : 10/9/2014
// arguments    : user object {userid, nodes, actions}
//                callback function (error, boolean)
//************************************************************************************************************
exports.getUserView = function(user, callback){
    if(user){
        
        
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-roshamuser.setUserTurn
// developer    : Kai
// developed on : 9/18/2014
// arguments    : user object {userid, nodes, actions}
//                callback function (error, boolean)
//************************************************************************************************************
exports.setUserTurn = function(user, callback){
    if(user){
        
        
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};
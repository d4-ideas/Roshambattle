//******************************************************************************
//  d4-realmuser
//  Zot
//  The purpose of this module is to store the user's current state
//******************************************************************************

var mongoose = require('mongoose');
var conn = require('d4-realmconnection');
var node = require('d4-realmnode');

var weaponTypes = ['Rock','Scissors','Paper'];
var actionTypes = ['Attack', 'Connect', 'Sever'];
var schema = new mongoose.Schema({
    user: {type: mongoose.Schema.Types.ObjectId, ref: 'user'}, 
    currentLoc: {type: mongoose.Schema.Types.ObjectId, ref: 'node'},
    actions: [{actionType: {type: String, enum:actionTypes},
               targetNode: {type: mongoose.Schema.Types.ObjectId, ref: 'node'},
               targetConnection: {type: mongoose.Schema.Types.ObjectId, ref: 'connection'}}]
});
var model = mongoose.model('realmUser', schema);
exports.schema = schema;
exports.model = model;

//model.update({currentLoc:null}, {$set:{'currentLoc':null}}, {multi:1} , function(err, data){});

//************************************************************************************************************
// function     : d4-realmuser.joinGame
// developer    : Kai
// developed on : 9/18/2014
// arguments    : user object {userid}
//                callback function (error, boolean)
//************************************************************************************************************
exports.joinGame = function(user, callback){
    var returnCount = 0;
    var gatherReturn = function(err, success){
        returnCount++;
        if(err){
            return callback(err, undefined);
        }
        if(returnCount == 2){
            callback(undefined, true);
        }
    };
    
    if(user && user.userid){
        var nodequery = node.model.findOne({}).where('owner').equals(user.userid);
        nodequery.where('type').equals('roshamwar');
        nodequery.exec(function(err, foundNode){
            if(err){
                return gatherReturn({'error': err}, undefined);
            }
            else{
                if(!foundNode){
                    var newNode = new node.model({    
                        'owner': user.userid, 
                        shortDesc:'Fist',
                        description: 'A lonely holdfast',
                        type: 'roshamwar'});
                    newNode.save(function(err){
                        if (err){
                            return gatherReturn({'error': err}, undefined);
                        }
                        else{
                            gatherReturn(undefined, true);
                        }
                    });
                }
                else{
                    gatherReturn(undefined, true);
                }
            }
        });
        
        var query = model.findOne({}).where('user').equals(user.userid);
        query.exec(function(err, foundUser){
            if(err){
                return gatherReturn({'error': err}, undefined);
            }
            else{
                if(!foundUser){
                    var newUser = new model({'user': user.userid});
                    newUser.save(function(err){
                        if (err){
                            return gatherReturn({'error': err}, undefined);
                        }
                        else{
                            gatherReturn(undefined, true);
                        }
                    });
                }
                else{
                    gatherReturn(undefined, true);
                }
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-realmuser.getUserView
// developer    : Kai
// developed on : 10/23/2014
// arguments    : user object {userid}
//                callback function (error, user{})
//************************************************************************************************************
exports.getUserView = function(user, callback){
    if(user && user.userid){
        var retView = {};
        var returnCount = 0;
        var returnNeeded = 3;
        var returnError = new Array(0);
        var gatherReturn = function(err, success){
            returnCount++;
            if(err){
                returnError.push(err.error);
            }
            else{
                // record the realmUser
                if(success.type === 'realmUser'){
                    retView.userid = success.object.user;  
                    if(success.object.actions){
                        retView.actions = success.object.actions;
                    }
                }
                
                // gather the connections
                if(success.type === 'connections'){
                    retView.connections = success.object;                   
                }

                // gather the nodes
                if(success.type === 'nodes'){
                    retView.nodes = success.object; 
                }
            
            
            }
            
            if(returnCount >= returnNeeded){
                if(returnError.length === 0){
                    callback(undefined, retView);
                }
                else{
                    callback({'error': returnError}, undefined);
                }
            }
        };
        
        /* get realmuser */
        var query = model.findOne({}).where('user').equals(user.userid);
        query.select('user actions');
        query.exec(function(err, foundUser){
            if(err){
                gatherReturn({'error': err}, undefined);
            }
            else{
                if(!foundUser){
                    gatherReturn({'error': 'No User Returned'}, undefined);
                }
                else{
                    gatherReturn(undefined, {'type': 'realmUser', 'object': foundUser});
                }
            }
        });
        
        /* get Connections */      
        var nodeQuery = node.model.find({}).where('owner').equals(user.userid);
        nodeQuery.where('type').equals('roshamwar');
        nodeQuery.exec(function(err, foundNode){
            if(err){
                gatherReturn({'error': err}, undefined);
            }
            else{
                gatherReturn(undefined, {'type': 'nodes', 'object': foundNode});
                // convert foundNodes to nodeid array
                var myNodes = foundNode.map(function(nextNode){return nextNode._id});
                
                /* get Connections */      
                var connQuery = conn.model.find({}).or([{'node1': {$in:myNodes}},{'node2': {$in:myNodes}}]);
                connQuery.populate('node1', 'owner shortDesc description');
                connQuery.populate('node2', 'owner shortDesc description');
                connQuery.exec(function(err, foundConn){
                    if(err){
                        gatherReturn({'error': err}, undefined);
                    }
                    else{
                        if(!foundConn){
                            gatherReturn({'error': 'No Connections Returned'}, undefined);
                        }
                        else{
                            gatherReturn(undefined, {'type': 'connections', 'object': foundConn});
                        }
                    }
                });
            }
        });
        
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-realmuser.takeAction
// developer    : Kai
// developed on : 10/23/2014
// arguments    : user object {userid, actions[]}
//                callback function (error, boolean)
//************************************************************************************************************
exports.takeAction = function(user, callback){
    if(user){
        var query = model.findOneAndUpdate({'user': user.userid}, {'actions': user.actions}, function(err, foundUser){
            if(err){
                callback({'error': err}, undefined);
            }
            else{
                callback(undefined, true);
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-realmuser.getCurrentLoc
// developer    : Rob
// arguments    : user object {userid}
//                callback function (error, node of currentLoc)
//***************************************************************************************
exports.getCurrentLoc = function(user, callback){
    if(user){
        var query = model.findOne({user: user.userid}, {currentLoc: 1});
        query.populate('currentLoc');
        query.exec(function(err, currentLoc){
            if(err||!currentLoc){
                callback({'error': err}, undefined);
            }
            else{
                callback(undefined, currentLoc);
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
}

//************************************************************************************************************
// function     : d4-realmuser.setCurrentLoc
// developer    : Rob
// arguments    : user object {userid, nodeID}
//                callback function (error, node of currentLoc)
//***************************************************************************************
exports.setCurrentLoc = function(user, callback){
    if(user){
        var query = model.findOneAndUpdate({'user': user.userid}, {'currentLoc': user.nodeID}, function(err, foundUser){
            if(err){
                callback({'error': err}, undefined);
            }
            else{
                callback(undefined, true);
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};
var mongoose = require('mongoose');
var weaponTypes = ['Rock','Scissors','Paper'];
var schTurn = new mongoose.Schema({
    turnDate: Date,
    participants: [{userid: mongoose.Schema.Types.ObjectId, 
                    weapon: {type: String, enum: weaponTypes}}]
});
var modTurn = mongoose.model('turn', schTurn);
exports.model = modTurn;

function findParticipant(participants, user){
    var index = 0;
    while(index < participants.length){
        if(participants[index].userid == user)
            return index
        index++;
    }
    return -1;
}


//************************************************************************************************************
// function     : d4-roshamturn.generateTurn
// developer    : Kai
// developed on : 5/23/2014
// arguments    : callback function (error, turnDate) 
//************************************************************************************************************
exports.generateTurn = function(callback){
    var result = require('d4-roshamresult');
    var roshamuser = require('d4-roshamuser');
    
    var newTurn = new modTurn({'turnDate': new Date});
    var query = roshamuser.roshamuserModel.find();
    query.where('weapon').in(weaponTypes);
    query.select('userid weapon -_id');
    query.exec(function(err, foundUsers){
        if(err){
            return callback({'error': err}, undefined);
        }
        else{
            newTurn.participants = foundUsers;
            var battle = {'turnDate': newTurn.turnDate},
                resultCount = 0 ;
            if (newTurn.participants <=1){
                return callback({error:'Put down that magazine and stop playing with yourself.'}, undefined);
            }
            else{
                for(var i=0; i<newTurn.participants.length - 1; i++){
                    battle.player1 = newTurn.participants[i].userid;
                    battle.weapon1 = newTurn.participants[i].weapon;
                    for(var j=i+1; j<newTurn.participants.length; j++){
                        battle.player2 = newTurn.participants[j].userid;
                        battle.weapon2 = newTurn.participants[j].weapon;

                        result.logResult(battle, function(err, newResult){
                            resultCount++;
                            console.log('logresult' + resultCount + ' ' + i + ' ' + (((newTurn.participants.length-1)*newTurn.participants.length)/2));
                            console.log(resultCount === (((newTurn.participants.length-1)*newTurn.participants.length)/2));
                            if(err){
                                return callback({'error': err.error}, undefined);
                            } else if (resultCount === (((newTurn.participants.length-1)*newTurn.participants.length)/2)) {
                                newTurn.save(function(err){
                                    if(err){
                                        return callback({'error': err.error}, undefined);
                                    }
                                    else{
                                        return callback(undefined, newTurn);
                                    }
                                });
                            }
                        });
                    }
                }
            }
        }
    });
};


//************************************************************************************************************
// function     : d4-roshamturn.getTurns
// developer    : Kai
// developed on : 6/5/2014
// arguments    : turnQuery object {startDate, userID, numberOfTurns}
//                callback function (error, [turnDate]) 
//************************************************************************************************************
exports.getTurns = function(turnQuery, callback){
    if(typeof turnQuery != 'undefined'){
        var query = modTurn.find().sort('-turnDate').select('turnDate');
        
        if(typeof turnQuery.startDate != 'undefined'){
            query.where('turnDate').lt(turnQuery.startDate);
        }
        if(typeof turnQuery.numberOfTurns != 'undefined'){
            query.batchSize(turnQuery.numberOfTurns);
        }
        if(typeof turnQuery.userID != 'undefined'){
            query.where('participants').elemMatch({'userid':turnQuery.userID});
        }
            
        query.find(function(err, foundTurns){
            if(err){
                return callback({'error': err}, undefined);
            }
            if(foundTurns){
                return callback(undefined, foundTurns);
            }
        });
    }
    else{
        return callback({'error': 'Your turnQuery is undefined... bitch.'}, undefined);
    }
}
var mongoose = require('mongoose');
var validator = require('validator');
var userSchema = new mongoose.Schema({
    email: { type: String, lowercase: true },
    name: String,
    mobile: String,
    password: String,
    token: {tokenDate: Date,
           tokenKey: String},
    createdate: { type: Date, default: Date.now }
});
var userModel = mongoose.model('user', userSchema);
exports.userModel = userModel;

//************************************************************************************************************
// function     : d4-user.getPassword
// developer    : Kai
// developed on : 5/18/2014
// arguments    : uhttp://localhost/forgotPassword<<<ser object {_id or email or tokenKey}
//                callback function (error, {_id, emailAddress, password, displayName})
//************************************************************************************************************
exports.getUser = function (user, callback) {
    if (user) {
        var query = userModel.findOne({});
        if (user._id) {
            query.where('_id').equals(user._id);
        }
        else if (user.email) {
            query.where('email').equals(user.email.toLocaleLowerCase());
        }
        else if (user.tokenKey) {
            query.where('token.tokenKey').equals(user.tokenKey);
        }
        else {
            return callback({'error': 'getUser was called incorrectly.'}, undefined);
        }
        query.exec(function (err, foundUser) {
            if (err) {
                return callback({'error': err}, undefined);
            }
            if (foundUser) {
                return callback(undefined, foundUser);
            }
            else {
                return callback({'error': 'That user does not exist'}, undefined);
            }
        });
    }
    else {
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
};


//************************************************************************************************************
// function     : d4-user.validateUser
// developer    : Kai
// developed on : 5/19/2014
// arguments    : user object {email or _id}
//                callback function (error, boolean)
//************************************************************************************************************
exports.validateUser = function (user, callback) {
    if (user) {
        var query = userModel.findOne({});
        if (user._id){
            query.where('_id').equals(user._id);
        }
        else if (user.email){
            query.where('email').equals(user.email);
        }
        else{
            return callback({'error': 'You must provide either an _id or an email.'}, undefined);
        }
        query.select('_id');
        query.exec(function(err, foundUser){
            if (err) {
                return callback({'error': err}, undefined);
            }
            if (foundUser) {
                return callback(undefined, true);
            }
            else {
                return callback(undefined, false);
            }
        });
    }
    else {
        return callback({'error': 'You really must provide an _id or an email if this is going to work.'}, undefined);
    }
};


//************************************************************************************************************
// function     : d4-user.getUserID
// developer    : Kai
// developed on : 5/18/2014
// arguments    : user object {email}
//                callback function (error, user._id)
//************************************************************************************************************
exports.getUserID = function (user, callback) {
    if (user) {
        if (user.email) {
            var query = userModel.findOne({}).where('email').equals(user.email.toLowerCase());
            query.select('_id');
            query.exec(function (err, foundUser) {
                if(err){
                    return callback({'error': err}, undefined);
                }
                if(foundUser){
                    return callback(undefined, foundUser._id);
                }
                else{
                    return callback({'error': 'That user does not exist'}, undefined);
                }
            });
        }
    }
    else {
        return callback({'error': 'You really must provide a user.email if this is going to work.'}, undefined);
    }
};


//************************************************************************************************************
// function     : d4-user.register
// developer    : Kai
// developed on : 5/17/2014
// arguments    : newUser object {displayName, emailAddress, password}
//                callback function (error, user._id)
//************************************************************************************************************
exports.register = function(newUser, callback){
    if (newUser){
        var oUser = {
            name: validator.escape(newUser.displayName),
            email: newUser.emailAddress.toLowerCase(), 
            password: newUser.password
        },
        query = userModel.findOne({'email': oUser.email});
        
        if (newUser.displayName == ''){
            return callback({'error': 'That user must have a display name'}, undefined);
        }
        if (oUser.email == ''){
            return callback({'error': 'That user must have an email address'}, undefined);
        }
        if (oUser.password == ''){
            return callback({'error': 'That user must have a password'}, undefined);
        }
        
        query.exec(function(err, foundUser){        
            if (err){
                return callback({'error': err}, undefined);
            }
            if (!foundUser){
                userModel.create(oUser, function(err, noob){
                    if (err) return callback({'error': err}, undefined);
                    else {
                        return callback(undefined, noob._id);
                    }
                });
            }
            else{
                return callback({'error': 'That user already exists, could not register'}, undefined);
            }
        });
            
    }
    else{
        return callback({'error': 'naughty, naughty, please provide a user'}, undefined);
    }
};

//************************************************************************************************************
// function     : d4-user.update
// developer    : Rob
// developed on : 7/28/2014
// arguments    : User object {_id, name, email, mobile, password, token}
//                callback function (error, user)
//************************************************************************************************************
exports.update = function(user, callback){
    var upUser = {};

    if (typeof user.name !== 'undefined')
        upUser.name = user.name;
    if (typeof user.email !== 'undefined')
        upUser.email = user.email;
    if (typeof user.mobile !== 'undefined')
        upUser.mobile = user.mobile;
    if (typeof user.password !== 'undefined')
        upUser.password = user.password;    
    if (typeof user.token !== 'undefined'){
        upUser.token = {tokenKey: user.token.tokenKey, tokenDate: user.token.tokenDate};
    }
    if (typeof user !== 'undefined' && user._id){
        console.log(upUser);
        userModel.findOneAndUpdate({_id:user._id}, upUser, {new:true}, function(err, data){
            if (err) {
                console.log(err);
                callback({error:err}, undefined);
            }
            else callback(undefined, data);
        });
    }
    else callback ({error:'You must supply _id'}, undefined);
console.log('gothere');
};

//************************************************************************************************************
// function     : d4-user.update
// developer    : Rob
// developed on : 7/28/2014
// arguments    : User object {userID, password}
//                callback function (error, user)
//************************************************************************************************************
exports.verifyPassword = function(user, callback){
    if (user._id && user.password){
        userModel.findOne({_id: user._id, password: user.password}, function(err, data){
            if (err){
                callback({error:err}, undefined);
            }
            else {
                if (data) callback(undefined, true);
                else callback(undefined, false);
            }
        });
    }
    else {
        callback ({error: 'You must supply a _id and password'}, undefined);
    };
};
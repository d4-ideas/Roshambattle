var mongoose = require('mongoose');
var userSchema = new mongoose.Schema({
    email: String,
    name: String,
    password: String,
    createdate: { type: Date, default: Date.now },
});
var userModel = mongoose.model('user', userSchema);
exports.userModel = userModel;

//************************************************************************************************************
// function     : d4-user.getPassword
// developer    : Kai
// developed on : 5/18/2014
// arguments    : user object {_id or email}
//                callback function (error, user.password)
//************************************************************************************************************
exports.getPassword = function(user, callback){
    if(user){
        var query = userModel.findOne({});
        if (user._id){
            query.where('_id').equals(user._id);
        }
        else if (user.email){
            query.where('email').equals(user.email);
        }
        else{
            return callback({'error': 'You must provide either an _id or an email.'}, undefined);
        }
        query.select('password');
        query.exec(function(err, foundUser){
            if(err){
                return callback({'error': err}, undefined);
            }
            if(foundUser){
                return callback(undefined, foundUser.password);
            }
            else{
                return callback({'error': 'That user does not exist'}, undefined);
            }
        });
    }
    else{
        return callback({'error': 'You really must provide a user if this is going to work.'}, undefined);
    }
}


//************************************************************************************************************
// function     : d4-user.validateUser
// developer    : Kai
// developed on : 5/19/2014
// arguments    : user object {email or _id}
//                callback function (error, boolean)
//************************************************************************************************************
exports.validateUser = function(user, callback){
    if(user){
        var query = userModel.findOne({});
        if (user._id){
            query.where('_id').equals(user._id);
        }
        else if (user.email){
            query.where('email').equals(user.email);
        }
        else{
            return callback({'error': 'You must provide either an _id or an email.'}, undefined);
        }
        query.select('_id');
        query.exec(function(err, foundUser){
            if(err){
                return callback({'error': err}, undefined);
            }
            if(foundUser){
                return callback(undefined, true);
            }
            else{
                return callback(undefined, false);
            }
        });
    }
    else{
        return callback({'error': 'You really must provide an _id or an email if this is going to work.'}, undefined);
    }
}


//************************************************************************************************************
// function     : d4-user.getUserID
// developer    : Kai
// developed on : 5/18/2014
// arguments    : user object {email}
//                callback function (error, user._id)
//************************************************************************************************************
exports.getUserID = function(user, callback){
    if(user){
        if (user.email){
            var query = userModel.findOne({}).where('email').equals(user.email);
            query.select('_id');
            query.exec(function(err, foundUser){
                if(err){
                    return callback({'error': err}, undefined);
                }
                if(foundUser){
                    return callback(undefined, foundUser._id);
                }
                else{
                    return callback({'error': 'That user does not exist'}, undefined);
                }
            });
        }
    }
    return callback({'error': 'You really must provide a user.email if this is going to work.'}, undefined);
}


//************************************************************************************************************
// function     : d4-user.register
// developer    : Kai
// developed on : 5/17/2014
// arguments    : newUser object {displayname, authentication.emailaddress, authentication.password}
//                callback function (error, user._id)
//************************************************************************************************************
exports.register = function(newUser, callback){
    if(newUser){
        console.log(newUser);
        var oUser = {
            name: newUser.displayName, 
            email: newUser.authentication.details.emailAddress, 
            password: newUser.authentication.details.password
        }
        var query = userModel.findOne({'email': newUser.authentication.details.emailAddress});
        
        if(newUser.displayName == ''){
            return callback({'error': 'That user must have a display name'}, undefined);
        }
        if(newUser.authentication.details.emailAddress == ''){
            return callback({'error': 'That user must have an email address'}, undefined);
        }
        if(newUser.authentication.details.password == ''){
            return callback({'error': 'That user must have a password'}, undefined);
        }
        
        query.exec(function(err, foundUser){
            if(err){
                return callback({'error': err}, undefined);
            }
            if(!foundUser){
                userModel.create(oUser, function(err, noob){
                    if (err) return callback({'error': err}, undefined);
                    else{
                        return callback(undefined, noob._id);
                    }
                });
            }
            else{
                return callback({'error': 'That user already exists, could not register'}, undefined);
            }
        });
            
    }
    else{
        return callback({'error': 'naughty, naughty, please provide a user'}, undefined);
    }
}

exports.update = function(user){
}
<!DOCTYPE html>
<html>
	<head>
		<title>d4-ides: realms</title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta name="apple-mobile-web-app-capable" content="yes">
		<script src="/socket.io/socket.io.js"></script>
		<link rel='stylesheet' href='/css/style.css' />
		<link rel='stylesheet' href='/css/scanlines.css' />
		<link rel='stylesheet' href='/css/nodes.css' />
		<script type="text/javascript" src="/js/jquery-2.1.1.min.js"></script>
		<script type="text/javascript" src="/js/main.js"></script>
		<script type="text/javascript" src="/js/realmEvents.js"></script>
		<script type="text/javascript" src="/js/scanlines.js"></script>
		<script type="text/javascript" src="/js/moment.min.js"></script>
	</head>
	<body class="theme-scanlines" data-uid="<%= userID %>">
		<div id="cover"><div id="line"><div id="dot"></div></div></div>
		<div id="error"></div>
		<div id="content">
			<h3 id="welcome-block">Welcome: <span><%= displayName %></span></h3>
			<div id="theme-widget">
				<a id="logout" href='/logout'>Logout</a>
				<span> | Theme:</span>
				<input type="radio" id="theme0" name="theme-options" value="0" data-themeName="none"><label for="theme0">0</label> | 
				<input type="radio" id="theme1" name="theme-options" value="1" data-themeName="scanlines" checked="checked"><label for="theme1">1</label> | 
				<input type="radio" id="theme2" name="theme-options" value="2" data-themeName="lcd"><label for="theme2">2</label>
			</div>

			<div id="tabs-block">
				<ul>
					<li class="active" data-tabid="explore-block">Graphical</li>
					<li data-tabid="design-block">Text only</li>
				</ul>
			</div>

			<div id="design-block" class="tab-block">
				<h1 style="margin: 50px auto; width: 80%; text-align: center;">Your mother is so fat, the recursive function computing her mass causes a stack overflow.</h1>
			
				<table id="node-farm">
					<thead>
						<tr>
							<th>Your Nodes</th>
							<th>Connections</th>
							<th>Action</th>
							<th>Weapon</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>Node 1</td>
							<td>
								Node 101 (Yours)<br>
								Node 102 (Player 3)<br>
								Node 103 (Player 4)
							</td>
							<td>
								Sever<br>
								Sever | Attack<br>
								Sever | Attack<br>
								Create New Connection
							</td>
							<td>Rock | Paper | Scissors</td>
						</tr>
						<tr>
							<td>Node 101</td>
							<td>
								Node 1 (Yours)<br>
								Node 102 (Player 2)<br>
								Node 103 (Player 99)
							</td>
							<td>
								Sever<br>
								Sever | Attack<br>
								Sever | Attack<br>
								Create New Connection
							</td>
							<td>Rock | Paper | Scissors</td>
						</tr>
				
				
					</tbody>
				</table>
			
			</div>
			<div id="explore-block" class="tab-block active">
				<div id="mysvg"></div>
			</div>
		</div>
	</body>
</html>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
	var links = [ { __v: 0,
		_id: '54110510d1902664ba8cbafc',
		desc12: 'A dusty road heads east',
		desc21: 'A dusty road heads west',
		source: 0,

		target: 1 } ]

	var nodes = [{ owner: '54110510d1902664ba8cbae6',
			 shortDesc: '<%= displayName %>',
			 _id: '54110510d1902664ba8cbaf6',
			 __v: 0 },
	{ owner: '54110510d1902664ba8cbae6',
			 shortDesc: '<%= displayName %>\'s Mom',
			 _id: '54110510d1902664ba8cbaf7',
			 __v: 0 }
	];
	
	var width = 960,
		height = 500;

	var force = d3.layout.force()
		.nodes(d3.values(nodes))
		.links(links)
		.size([width, height])
		.linkDistance(200)
		.charge(-300)
		.on("tick", tick)
		.start();

	var svg = d3.select("#mysvg").append("svg")
		.attr("width", width)
		.attr("height", height);

	// Per-type markers, as they don't inherit styles.
	svg.append("defs").selectAll("marker")
		.data(["suit", "licensing", "resolved"])
		.enter().append("marker")
		.attr("id", function(d) { return d; })
		.attr("viewBox", "0 -5 10 10")
		.attr("refX", 15)
		.attr("refY", -1.5)
		.attr("markerWidth", 6)
		.attr("markerHeight", 6)
		.attr("orient", "auto")
		.append("path")
		.attr("d", "M0,-5L10,0L0,5");

	var path = svg.append("g").selectAll("path")
		.data(force.links())
		.enter().append("path")
		.attr("class", function(d) { return "link " + d.type; });
		// Removing the Arrow for now
		//.attr("marker-end", function(d) { return "url(#" + "suit"/*d.type*/ + ")"; });

	var circle = svg.append("g").selectAll("circle")
		.data(force.nodes())
		.enter().append("circle")
		.attr("r", 12)
		.call(force.drag);

	var text = svg.append("g").selectAll("text")
		.data(force.nodes())
		.enter().append("text")
		.attr("x", 15)
		.attr("y", ".31em")
	//	.text(function(d) { return d.name; });
		.text(function(d) { return d.shortDesc; });

	// Use elliptical arc path segments to doubly-encode directionality.
	function tick() {
		path.attr("d", linkArc);
		circle.attr("transform", transform);
		text.attr("transform", transform);
	}

	function linkArc(d) {
		var dx = d.target.x - d.source.x,
			dy = d.target.y - d.source.y,
			dr = Math.sqrt(dx * dx + dy * dy);
		return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
	}

	function transform(d) {
		return "translate(" + d.x + "," + d.y + ")";
	}

	// MMMmmm.. beer 
	setTimeout(function(){
		$('circle:last-of-type').attr('r','18');
	},3000);
	setTimeout(function(){
		$('circle:last-of-type').attr('r','24');
	},6000);
	setTimeout(function(){
		$('circle:last-of-type').attr('r','30');
	},9000);
	setTimeout(function(){
		$('circle:last-of-type').attr('r','36');
	},12000);
	setTimeout(function(){
		$('circle:last-of-type').attr('r','72');
	},18000);

</script>